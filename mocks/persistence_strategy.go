// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import eventstore "github.com/hellofresh/goengine/eventstore"
import goengine_dev "github.com/hellofresh/goengine-dev"
import mock "github.com/stretchr/testify/mock"

// PersistenceStrategy is an autogenerated mock type for the PersistenceStrategy type
type PersistenceStrategy struct {
	mock.Mock
}

// ColumnNames provides a mock function with given fields:
func (_m *PersistenceStrategy) ColumnNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// CreateSchema provides a mock function with given fields: tableName
func (_m *PersistenceStrategy) CreateSchema(tableName string) []string {
	ret := _m.Called(tableName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GenerateTableName provides a mock function with given fields: streamName
func (_m *PersistenceStrategy) GenerateTableName(streamName eventstore.StreamName) (string, error) {
	ret := _m.Called(streamName)

	var r0 string
	if rf, ok := ret.Get(0).(func(eventstore.StreamName) string); ok {
		r0 = rf(streamName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(eventstore.StreamName) error); ok {
		r1 = rf(streamName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareData provides a mock function with given fields: _a0
func (_m *PersistenceStrategy) PrepareData(_a0 []goengine_dev.Message) ([]interface{}, error) {
	ret := _m.Called(_a0)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func([]goengine_dev.Message) []interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]goengine_dev.Message) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
