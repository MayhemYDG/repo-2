// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import eventstore "github.com/hellofresh/goengine/eventstore"
import messaging "github.com/hellofresh/goengine/messaging"
import metadata "github.com/hellofresh/goengine/metadata"
import mock "github.com/stretchr/testify/mock"

// EventStore is an autogenerated mock type for the EventStore type
type EventStore struct {
	mock.Mock
}

// AppendTo provides a mock function with given fields: ctx, streamName, streamEvents
func (_m *EventStore) AppendTo(ctx context.Context, streamName eventstore.StreamName, streamEvents []messaging.Message) error {
	ret := _m.Called(ctx, streamName, streamEvents)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, eventstore.StreamName, []messaging.Message) error); ok {
		r0 = rf(ctx, streamName, streamEvents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, streamName
func (_m *EventStore) Create(ctx context.Context, streamName eventstore.StreamName) error {
	ret := _m.Called(ctx, streamName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, eventstore.StreamName) error); ok {
		r0 = rf(ctx, streamName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasStream provides a mock function with given fields: ctx, streamName
func (_m *EventStore) HasStream(ctx context.Context, streamName eventstore.StreamName) bool {
	ret := _m.Called(ctx, streamName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, eventstore.StreamName) bool); ok {
		r0 = rf(ctx, streamName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Load provides a mock function with given fields: ctx, streamName, fromNumber, count, metadataMatcher
func (_m *EventStore) Load(ctx context.Context, streamName eventstore.StreamName, fromNumber int, count *uint, metadataMatcher metadata.Matcher) ([]messaging.Message, error) {
	ret := _m.Called(ctx, streamName, fromNumber, count, metadataMatcher)

	var r0 []messaging.Message
	if rf, ok := ret.Get(0).(func(context.Context, eventstore.StreamName, int, *uint, metadata.Matcher) []messaging.Message); ok {
		r0 = rf(ctx, streamName, fromNumber, count, metadataMatcher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messaging.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, eventstore.StreamName, int, *uint, metadata.Matcher) error); ok {
		r1 = rf(ctx, streamName, fromNumber, count, metadataMatcher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
