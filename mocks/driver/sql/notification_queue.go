// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hellofresh/goengine/driver/sql (interfaces: NotificationQueueInterface)

// Package sql is a generated GoMock package.
package sql

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sql "github.com/hellofresh/goengine/driver/sql"
	reflect "reflect"
)

// MockNotificationQueueInterface is a mock of NotificationQueueInterface interface
type MockNotificationQueueInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationQueueInterfaceMockRecorder
}

// MockNotificationQueueInterfaceMockRecorder is the mock recorder for MockNotificationQueueInterface
type MockNotificationQueueInterfaceMockRecorder struct {
	mock *MockNotificationQueueInterface
}

// NewMockNotificationQueueInterface creates a new mock instance
func NewMockNotificationQueueInterface(ctrl *gomock.Controller) *MockNotificationQueueInterface {
	mock := &MockNotificationQueueInterface{ctrl: ctrl}
	mock.recorder = &MockNotificationQueueInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationQueueInterface) EXPECT() *MockNotificationQueueInterfaceMockRecorder {
	return m.recorder
}

// Channel mocks base method
func (m *MockNotificationQueueInterface) Channel() chan *sql.ProjectionNotification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(chan *sql.ProjectionNotification)
	return ret0
}

// Channel indicates an expected call of Channel
func (mr *MockNotificationQueueInterfaceMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockNotificationQueueInterface)(nil).Channel))
}

// Close mocks base method
func (m *MockNotificationQueueInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockNotificationQueueInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNotificationQueueInterface)(nil).Close))
}

// Empty mocks base method
func (m *MockNotificationQueueInterface) Empty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty
func (mr *MockNotificationQueueInterfaceMockRecorder) Empty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockNotificationQueueInterface)(nil).Empty))
}

// Open mocks base method
func (m *MockNotificationQueueInterface) Open(arg0 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Open", arg0)
}

// Open indicates an expected call of Open
func (mr *MockNotificationQueueInterfaceMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockNotificationQueueInterface)(nil).Open), arg0)
}

// PutBack mocks base method
func (m *MockNotificationQueueInterface) PutBack(arg0 *sql.ProjectionNotification) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutBack", arg0)
}

// PutBack indicates an expected call of PutBack
func (mr *MockNotificationQueueInterfaceMockRecorder) PutBack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBack", reflect.TypeOf((*MockNotificationQueueInterface)(nil).PutBack), arg0)
}

// Queue mocks base method
func (m *MockNotificationQueueInterface) Queue(arg0 context.Context, arg1 *sql.ProjectionNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Queue indicates an expected call of Queue
func (mr *MockNotificationQueueInterfaceMockRecorder) Queue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*MockNotificationQueueInterface)(nil).Queue), arg0, arg1)
}

// ReQueue mocks base method
func (m *MockNotificationQueueInterface) ReQueue(arg0 context.Context, arg1 *sql.ProjectionNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReQueue indicates an expected call of ReQueue
func (mr *MockNotificationQueueInterfaceMockRecorder) ReQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReQueue", reflect.TypeOf((*MockNotificationQueueInterface)(nil).ReQueue), arg0, arg1)
}
