// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import messaging "github.com/hellofresh/goengine/messaging"
import mock "github.com/stretchr/testify/mock"

// EventStream is an autogenerated mock type for the EventStream type
type EventStream struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *EventStream) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *EventStream) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Message provides a mock function with given fields:
func (_m *EventStream) Message() (messaging.Message, error) {
	ret := _m.Called()

	var r0 messaging.Message
	if rf, ok := ret.Get(0).(func() messaging.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(messaging.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Next provides a mock function with given fields:
func (_m *EventStream) Next() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
