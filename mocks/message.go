// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import messaging "github.com/hellofresh/goengine/messaging"
import metadata "github.com/hellofresh/goengine/metadata"
import mock "github.com/stretchr/testify/mock"
import time "time"
import uuid "github.com/google/uuid"

// Message is an autogenerated mock type for the Message type
type Message struct {
	mock.Mock
}

// CreatedAt provides a mock function with given fields:
func (_m *Message) CreatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Metadata provides a mock function with given fields:
func (_m *Message) Metadata() metadata.Metadata {
	ret := _m.Called()

	var r0 metadata.Metadata
	if rf, ok := ret.Get(0).(func() metadata.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.Metadata)
		}
	}

	return r0
}

// Payload provides a mock function with given fields:
func (_m *Message) Payload() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// UUID provides a mock function with given fields:
func (_m *Message) UUID() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// WithMetadata provides a mock function with given fields: key, value
func (_m *Message) WithMetadata(key string, value interface{}) messaging.Message {
	ret := _m.Called(key, value)

	var r0 messaging.Message
	if rf, ok := ret.Get(0).(func(string, interface{}) messaging.Message); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(messaging.Message)
		}
	}

	return r0
}
